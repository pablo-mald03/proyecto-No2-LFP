// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/main/java/com/pablocompany/proyectono2lfp/jflexpackage/lexer.flex

/*CABECERA*/

package com.pablocompany.proyectono2lfp.jflexpackage;


@SuppressWarnings("fallthrough")
public class AnalizadorLexico {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\126\u0100\1\u2600\1\u0100\1\u2700"+
    "\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\53\u0100\1\u2d00\10\u2e00"+
    "\31\u1f00\1\u0100\1\u2f00\1\u3000\1\u0100\1\u3100\1\u3200\1\u3300"+
    "\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u0100\1\u3a00"+
    "\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100\1\u4200"+
    "\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800\1\u4900\1\u4a00"+
    "\1\u4b00\1\u4c00\1\u4d00\1\u1f00\1\u4e00\1\u4f00\1\u5000\1\u5100"+
    "\3\u0100\1\u5200\1\u5300\1\u5400\11\u1f00\1\u5500\4\u0100\1\u5600"+
    "\17\u1f00\2\u0100\1\u5700\41\u1f00\2\u0100\1\u5800\1\u5900\2\u1f00"+
    "\1\u5a00\1\u5b00\27\u0100\1\u5c00\4\u0100\1\u5d00\1\u5e00\41\u1f00"+
    "\1\u5f00\1\u0100\1\u6000\1\u6100\11\u1f00\1\u6200\22\u1f00\1\u6300"+
    "\1\u1f00\1\u6400\1\u6500\1\u1f00\1\u6600\1\u6700\1\u6800\1\u6900"+
    "\2\u1f00\1\u6a00\4\u1f00\1\u6b00\1\u6c00\1\u6d00\1\u6e00\1\u1f00"+
    "\1\u6f00\2\u1f00\1\u7000\1\u7100\1\u7200\2\u1f00\1\u7300\1\u1f00"+
    "\1\u7400\14\u1f00\1\u7500\4\u1f00\246\u0100\1\u7600\20\u0100\1\u7700"+
    "\1\u7800\25\u0100\1\u7900\34\u0100\1\u7a00\14\u1f00\2\u0100\1\u7b00"+
    "\5\u1f00\23\u0100\1\u7c00\17\u0100\1\u7d00\u0adc\u1f00\1\u7e00\1\u7f00"+
    "\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\1\1\3\16\0\10\1\1\4"+
    "\13\1\1\5\11\6\7\1\32\4\4\1\1\4\1\1"+
    "\32\4\4\1\41\0\2\1\4\4\4\1\1\4\2\1"+
    "\1\0\7\1\1\4\4\1\1\4\5\1\27\4\1\1"+
    "\37\4\1\1\u01ca\4\4\1\14\4\16\1\5\4\7\1"+
    "\1\4\1\1\1\4\21\1\160\0\5\4\1\1\2\4"+
    "\2\1\4\4\1\1\1\4\6\1\1\4\1\1\3\4"+
    "\1\1\1\4\1\1\24\4\1\1\123\4\1\1\213\4"+
    "\1\1\5\0\2\1\246\4\1\1\46\4\2\1\1\4"+
    "\6\1\51\4\6\1\1\4\1\1\55\0\1\1\1\0"+
    "\1\1\2\0\1\1\2\0\1\1\1\0\10\1\33\4"+
    "\4\1\4\4\15\1\6\0\5\1\1\4\4\1\13\0"+
    "\1\1\1\0\3\1\53\4\37\0\4\1\2\4\1\0"+
    "\143\4\1\1\1\4\10\0\1\1\6\0\2\4\2\0"+
    "\1\1\4\0\2\4\12\0\3\4\2\1\1\4\17\1"+
    "\1\0\1\4\1\0\36\4\33\0\2\1\131\4\13\0"+
    "\1\4\16\1\12\0\41\4\11\0\2\4\4\1\1\4"+
    "\2\1\1\0\30\4\4\0\1\4\11\0\1\4\3\0"+
    "\1\4\5\0\22\1\31\4\3\0\4\1\13\4\5\1"+
    "\30\4\1\1\6\4\1\1\2\0\6\1\10\0\52\4"+
    "\72\0\66\4\3\0\1\4\22\0\1\4\7\0\12\4"+
    "\2\0\2\1\12\0\1\1\20\4\3\0\1\1\10\4"+
    "\2\1\2\4\2\1\26\4\1\1\7\4\1\1\1\4"+
    "\3\1\4\4\2\1\1\0\1\4\7\0\2\1\2\0"+
    "\2\1\3\0\1\4\10\1\1\0\4\1\2\4\1\1"+
    "\3\4\2\0\2\1\12\0\4\4\7\1\2\4\1\1"+
    "\1\0\2\1\3\0\1\1\6\4\4\1\2\4\2\1"+
    "\26\4\1\1\7\4\1\1\2\4\1\1\2\4\1\1"+
    "\2\4\2\1\1\0\1\1\5\0\4\1\2\0\2\1"+
    "\3\0\3\1\1\0\7\1\4\4\1\1\1\4\7\1"+
    "\14\0\3\4\1\0\13\1\3\0\1\1\11\4\1\1"+
    "\3\4\1\1\26\4\1\1\7\4\1\1\2\4\1\1"+
    "\5\4\2\1\1\0\1\4\10\0\1\1\3\0\1\1"+
    "\3\0\2\1\1\4\17\1\2\4\2\0\2\1\12\0"+
    "\1\1\1\4\7\1\1\4\6\0\1\1\3\0\1\1"+
    "\10\4\2\1\2\4\2\1\26\4\1\1\7\4\1\1"+
    "\2\4\1\1\5\4\2\1\1\0\1\4\7\0\2\1"+
    "\2\0\2\1\3\0\7\1\3\0\4\1\2\4\1\1"+
    "\3\4\2\0\2\1\12\0\1\1\1\4\20\1\1\0"+
    "\1\4\1\1\6\4\3\1\3\4\1\1\4\4\3\1"+
    "\2\4\1\1\1\4\1\1\2\4\3\1\2\4\3\1"+
    "\3\4\3\1\14\4\4\1\5\0\3\1\3\0\1\1"+
    "\4\0\2\1\1\4\6\1\1\0\16\1\12\0\11\1"+
    "\1\4\6\1\5\0\10\4\1\1\3\4\1\1\27\4"+
    "\1\1\20\4\2\1\1\0\1\4\7\0\1\1\3\0"+
    "\1\1\4\0\7\1\2\0\1\1\3\4\2\1\1\4"+
    "\2\1\2\4\2\0\2\1\12\0\20\1\1\4\3\0"+
    "\1\1\10\4\1\1\3\4\1\1\27\4\1\1\12\4"+
    "\1\1\5\4\2\1\1\0\1\4\7\0\1\1\3\0"+
    "\1\1\4\0\7\1\2\0\6\1\2\4\1\1\2\4"+
    "\2\0\2\1\12\0\1\1\2\4\1\0\14\1\4\0"+
    "\11\4\1\1\3\4\1\1\51\4\2\0\1\4\7\0"+
    "\1\1\3\0\1\1\4\0\1\4\5\1\3\4\1\0"+
    "\7\1\3\4\2\0\2\1\12\0\12\1\6\4\1\1"+
    "\3\0\1\1\22\4\3\1\30\4\1\1\11\4\1\1"+
    "\1\4\2\1\7\4\3\1\1\0\4\1\6\0\1\1"+
    "\1\0\1\1\10\0\6\1\12\0\2\1\2\0\15\1"+
    "\60\4\1\0\2\4\7\0\4\1\10\4\10\0\1\1"+
    "\12\0\47\1\2\4\1\1\1\4\1\1\5\4\1\1"+
    "\30\4\1\1\1\4\1\1\12\4\1\0\2\4\11\0"+
    "\1\4\2\1\5\4\1\1\1\4\1\1\7\0\1\1"+
    "\12\0\2\1\4\4\40\1\1\4\27\1\2\0\6\1"+
    "\12\0\13\1\1\0\1\1\1\0\1\1\1\0\4\1"+
    "\2\0\10\4\1\1\44\4\4\1\24\0\1\1\2\0"+
    "\5\4\13\0\1\1\44\0\11\1\1\0\71\1\53\4"+
    "\24\0\1\4\12\0\6\1\6\4\4\0\4\4\3\0"+
    "\1\4\3\0\2\4\7\0\3\4\4\0\15\4\14\0"+
    "\1\4\17\0\2\1\46\4\1\1\1\4\5\1\1\4"+
    "\2\1\53\4\1\1\115\4\1\1\4\4\2\1\7\4"+
    "\1\1\1\4\1\1\4\4\2\1\51\4\1\1\4\4"+
    "\2\1\41\4\1\1\4\4\2\1\7\4\1\1\1\4"+
    "\1\1\4\4\2\1\17\4\1\1\71\4\1\1\4\4"+
    "\2\1\103\4\2\1\3\0\40\1\20\4\20\1\126\4"+
    "\2\1\6\4\3\1\u016c\4\2\1\21\4\1\1\32\4"+
    "\5\1\113\4\3\1\13\4\7\1\22\4\4\0\11\1"+
    "\23\4\3\0\13\1\22\4\2\0\14\1\15\4\1\1"+
    "\3\4\1\1\2\0\14\1\64\4\40\0\3\1\1\4"+
    "\3\1\2\4\1\0\2\1\12\0\41\1\17\0\6\1"+
    "\131\4\7\1\5\4\2\0\42\4\1\0\1\4\5\1"+
    "\106\4\12\1\37\4\1\1\14\0\4\1\14\0\12\1"+
    "\12\0\36\4\2\1\5\4\13\1\54\4\4\1\32\4"+
    "\6\1\12\0\46\1\27\4\5\0\4\1\65\4\12\0"+
    "\1\1\35\0\2\1\13\0\6\1\12\0\15\1\1\4"+
    "\10\1\16\0\1\1\20\0\61\1\5\0\57\4\21\0"+
    "\10\4\3\1\12\0\21\1\11\0\14\1\3\0\36\4"+
    "\15\0\2\4\12\0\54\4\16\0\14\1\44\4\24\0"+
    "\10\1\12\0\3\1\3\4\12\0\44\4\2\1\11\4"+
    "\7\1\53\4\2\1\3\4\20\1\3\0\1\1\25\0"+
    "\4\4\1\0\6\4\1\0\2\4\3\0\1\4\5\1"+
    "\300\4\100\0\26\4\2\1\6\4\2\1\46\4\2\1"+
    "\6\4\2\1\10\4\1\1\1\4\1\1\1\4\1\1"+
    "\1\4\1\1\37\4\2\1\65\4\1\1\7\4\1\1"+
    "\1\4\3\1\3\4\1\1\7\4\3\1\4\4\2\1"+
    "\6\4\4\1\15\4\5\1\3\4\1\1\7\4\16\1"+
    "\5\0\32\1\5\0\20\1\2\4\23\1\1\4\13\1"+
    "\5\0\1\1\12\0\1\1\1\4\15\1\1\4\20\1"+
    "\15\4\3\1\41\4\17\1\15\0\4\1\1\0\3\1"+
    "\14\0\21\1\1\4\4\1\1\4\2\1\12\4\1\1"+
    "\1\4\3\1\5\4\6\1\1\4\1\1\1\4\1\1"+
    "\1\4\1\1\4\4\1\1\13\4\2\1\4\4\5\1"+
    "\5\4\4\1\1\4\21\1\51\4\u0177\1\345\4\6\1"+
    "\4\4\3\0\2\4\14\1\46\4\1\1\1\4\5\1"+
    "\1\4\2\1\70\4\7\1\1\4\17\1\1\0\27\4"+
    "\11\1\7\4\1\1\7\4\1\1\7\4\1\1\7\4"+
    "\1\1\7\4\1\1\7\4\1\1\7\4\1\1\7\4"+
    "\1\1\40\0\57\1\1\4\325\1\3\4\31\1\11\4"+
    "\6\0\1\1\5\4\2\1\5\4\4\1\126\4\2\1"+
    "\2\0\2\1\3\4\1\1\132\4\1\1\4\4\5\1"+
    "\53\4\1\1\136\4\21\1\40\4\60\1\320\4\100\1"+
    "\215\4\103\1\56\4\2\1\15\4\3\1\20\4\12\0"+
    "\2\4\24\1\57\4\1\0\4\1\12\0\1\1\37\4"+
    "\2\0\120\4\2\0\45\1\11\4\2\1\147\4\2\1"+
    "\100\4\5\1\2\4\1\1\1\4\1\1\5\4\30\1"+
    "\20\4\1\0\3\4\1\0\4\4\1\0\27\4\5\0"+
    "\4\1\1\0\13\1\1\4\7\1\64\4\14\1\2\0"+
    "\62\4\22\0\12\1\12\0\6\1\22\0\6\4\3\1"+
    "\1\4\1\1\2\4\13\0\34\4\10\0\2\1\27\4"+
    "\15\0\14\1\35\4\3\1\4\0\57\4\16\0\16\1"+
    "\1\4\12\0\6\1\5\4\1\0\12\4\12\0\5\4"+
    "\1\1\51\4\16\0\11\1\3\4\1\0\10\4\2\0"+
    "\2\1\12\0\6\1\27\4\3\1\1\4\3\0\62\4"+
    "\1\0\1\4\3\0\2\4\2\0\5\4\2\0\1\4"+
    "\1\0\1\4\30\1\3\4\2\1\13\4\5\0\2\1"+
    "\3\4\2\0\12\1\6\4\2\1\6\4\2\1\6\4"+
    "\11\1\7\4\1\1\7\4\1\1\53\4\1\1\16\4"+
    "\6\1\163\4\10\0\1\1\2\0\2\1\12\0\6\1"+
    "\244\4\14\1\27\4\4\1\61\4\u0104\1\156\4\2\1"+
    "\152\4\46\1\7\4\14\1\5\4\5\1\1\4\1\0"+
    "\12\4\1\1\15\4\1\1\5\4\1\1\1\4\1\1"+
    "\2\4\1\1\2\4\1\1\154\4\41\1\153\4\22\1"+
    "\100\4\2\1\66\4\50\1\15\4\3\1\20\0\20\1"+
    "\20\0\3\1\2\4\30\1\3\4\31\1\1\4\6\1"+
    "\5\4\1\1\207\4\2\1\1\0\4\1\1\4\13\1"+
    "\12\0\7\1\32\4\4\1\1\4\1\1\32\4\13\1"+
    "\131\4\3\1\6\4\2\1\6\4\2\1\6\4\2\1"+
    "\3\4\3\1\2\4\3\1\2\4\22\1\3\0\4\1"+
    "\14\4\1\1\32\4\1\1\23\4\1\1\2\4\1\1"+
    "\17\4\2\1\16\4\42\1\173\4\105\1\65\4\210\1"+
    "\1\0\202\1\35\4\3\1\61\4\17\1\1\0\37\1"+
    "\40\4\15\1\36\4\5\1\46\4\5\0\5\1\36\4"+
    "\2\1\44\4\4\1\10\4\1\1\5\4\52\1\236\4"+
    "\2\1\12\0\6\1\44\4\4\1\44\4\4\1\50\4"+
    "\10\1\64\4\14\1\13\4\1\1\17\4\1\1\7\4"+
    "\1\1\2\4\1\1\13\4\1\1\17\4\1\1\7\4"+
    "\1\1\2\4\103\1\67\4\11\1\26\4\12\1\10\4"+
    "\30\1\6\4\1\1\52\4\1\1\11\4\105\1\6\4"+
    "\2\1\1\4\1\1\54\4\1\1\2\4\3\1\1\4"+
    "\2\1\27\4\12\1\27\4\11\1\37\4\101\1\23\4"+
    "\1\1\2\4\12\1\26\4\12\1\32\4\106\1\70\4"+
    "\6\1\2\4\100\1\1\4\3\0\1\1\2\0\5\1"+
    "\4\0\4\4\1\1\3\4\1\1\35\4\2\1\3\0"+
    "\4\1\1\0\40\1\35\4\3\1\35\4\43\1\10\4"+
    "\1\1\34\4\2\0\31\1\66\4\12\1\26\4\12\1"+
    "\23\4\15\1\22\4\156\1\111\4\67\1\63\4\15\1"+
    "\63\4\15\1\44\4\4\0\10\1\12\0\u0146\1\52\4"+
    "\1\1\2\0\3\1\2\4\113\1\3\0\35\4\12\1"+
    "\1\4\10\1\26\4\13\0\37\1\22\4\4\0\52\1"+
    "\25\4\33\1\27\4\11\1\3\0\65\4\17\0\37\1"+
    "\13\0\2\4\2\0\1\4\11\1\4\0\55\4\13\0"+
    "\2\1\1\0\4\1\1\0\12\1\1\0\2\1\31\4"+
    "\7\1\12\0\6\1\3\0\44\4\16\0\1\1\12\0"+
    "\4\1\1\4\2\0\1\4\10\1\43\4\1\0\2\1"+
    "\1\4\11\1\3\0\60\4\16\0\4\4\4\1\4\0"+
    "\1\1\14\0\1\4\1\1\1\4\43\1\22\4\1\1"+
    "\31\4\14\0\6\1\1\0\2\4\1\0\76\1\7\4"+
    "\1\1\1\4\1\1\4\4\1\1\17\4\1\1\12\4"+
    "\7\1\57\4\14\0\5\1\12\0\6\1\4\0\1\1"+
    "\10\4\2\1\2\4\2\1\26\4\1\1\7\4\1\1"+
    "\2\4\1\1\5\4\1\1\2\0\1\4\7\0\2\1"+
    "\2\0\2\1\3\0\2\1\1\4\6\1\1\0\5\1"+
    "\5\4\2\0\2\1\7\0\3\1\5\0\213\1\65\4"+
    "\22\0\4\4\5\1\12\0\4\1\1\0\3\4\36\1"+
    "\60\4\24\0\2\4\1\1\1\4\10\1\12\0\246\1"+
    "\57\4\7\0\2\1\11\0\27\1\4\4\2\0\42\1"+
    "\60\4\21\0\3\1\1\4\13\1\12\0\46\1\53\4"+
    "\15\0\1\4\7\1\12\0\66\1\33\4\2\1\17\0"+
    "\4\1\12\0\6\1\7\4\271\1\54\4\17\0\145\1"+
    "\100\4\12\0\25\1\10\4\2\1\1\4\2\1\10\4"+
    "\1\1\2\4\1\1\30\4\6\0\1\1\2\0\2\1"+
    "\4\0\1\4\1\0\1\4\2\0\14\1\12\0\106\1"+
    "\10\4\2\1\47\4\7\0\2\1\7\0\1\4\1\1"+
    "\1\4\1\0\33\1\1\4\12\0\50\4\7\0\1\4"+
    "\4\0\10\1\1\0\10\1\1\4\13\0\56\4\20\0"+
    "\3\1\1\4\22\1\111\4\7\1\11\4\1\1\45\4"+
    "\10\0\1\1\10\0\1\4\17\1\12\0\30\1\36\4"+
    "\2\1\26\0\1\1\16\0\111\1\7\4\1\1\2\4"+
    "\1\1\46\4\6\0\3\1\1\0\1\1\2\0\1\1"+
    "\7\0\1\4\1\0\10\1\12\0\6\1\6\4\1\1"+
    "\2\4\1\1\40\4\5\0\1\1\2\0\1\1\5\0"+
    "\1\4\7\1\12\0\u0136\1\23\4\4\0\11\1\2\0"+
    "\1\4\1\0\15\4\1\1\42\4\7\0\3\1\5\0"+
    "\15\1\12\0\126\1\1\4\54\1\4\4\37\1\232\4"+
    "\146\1\157\4\21\1\304\4\u014c\1\141\4\17\1\60\4"+
    "\21\0\6\4\17\0\252\1\107\4\271\1\71\4\7\1"+
    "\37\4\1\1\12\0\6\1\117\4\1\1\12\0\6\1"+
    "\36\4\2\1\5\0\13\1\60\4\7\0\11\1\4\4"+
    "\14\1\12\0\11\1\25\4\5\1\23\4\260\1\100\4"+
    "\200\1\113\4\4\1\1\0\1\4\67\0\7\1\4\0"+
    "\15\4\100\1\2\4\1\1\1\4\1\0\13\1\2\0"+
    "\16\1\370\4\10\1\326\4\52\1\11\4\u01e7\1\4\4"+
    "\1\1\7\4\1\1\2\4\1\1\43\4\17\1\1\4"+
    "\35\1\3\4\2\1\1\4\16\1\4\4\10\1\u018c\4"+
    "\4\1\153\4\5\1\15\4\3\1\11\4\7\1\12\4"+
    "\3\1\2\0\1\1\4\0\134\1\56\0\2\1\27\0"+
    "\u011e\1\5\0\3\1\26\0\2\1\7\0\36\1\4\0"+
    "\224\1\3\0\273\1\125\4\1\1\107\4\1\1\2\4"+
    "\2\1\1\4\2\1\2\4\2\1\4\4\1\1\14\4"+
    "\1\1\1\4\1\1\7\4\1\1\101\4\1\1\4\4"+
    "\2\1\10\4\1\1\7\4\1\1\34\4\1\1\4\4"+
    "\1\1\5\4\1\1\1\4\3\1\7\4\1\1\u0154\4"+
    "\2\1\31\4\1\1\31\4\1\1\37\4\1\1\31\4"+
    "\1\1\37\4\1\1\31\4\1\1\37\4\1\1\31\4"+
    "\1\1\37\4\1\1\31\4\1\1\10\4\2\1\151\0"+
    "\4\1\62\0\10\1\1\0\16\1\1\0\26\1\5\0"+
    "\1\1\17\0\120\1\37\4\6\1\6\4\325\1\7\0"+
    "\1\1\21\0\2\1\7\0\1\1\2\0\1\1\5\0"+
    "\5\1\76\4\41\1\1\0\160\1\55\4\3\1\7\0"+
    "\7\4\2\1\12\0\4\1\1\4\u0141\1\36\4\1\0"+
    "\21\1\54\4\16\0\5\1\1\4\320\1\34\4\16\0"+
    "\346\1\7\4\1\1\4\4\1\1\2\4\1\1\17\4"+
    "\1\1\305\4\13\1\7\0\51\1\104\4\7\0\1\4"+
    "\4\1\12\0\u0156\1\1\4\117\1\4\4\1\1\33\4"+
    "\1\1\2\4\1\1\1\4\2\1\1\4\1\1\12\4"+
    "\1\1\4\4\1\1\1\4\1\1\1\4\6\1\1\4"+
    "\4\1\1\4\1\1\1\4\1\1\1\4\1\1\3\4"+
    "\1\1\2\4\1\1\1\4\2\1\1\4\1\1\1\4"+
    "\1\1\1\4\1\1\1\4\1\1\1\4\1\1\2\4"+
    "\1\1\1\4\2\1\4\4\1\1\7\4\1\1\4\4"+
    "\1\1\4\4\1\1\1\4\1\1\12\4\1\1\21\4"+
    "\5\1\3\4\1\1\5\4\1\1\21\4\u0134\1\12\0"+
    "\6\1\340\4\40\1\72\4\6\1\336\4\2\1\u0182\4"+
    "\16\1\u0131\4\37\1\36\4\342\1\113\4\5\1\u0160\4"+
    "\121\1\1\0\36\1\140\0\200\1\360\0\20\1";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[32768];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\2\4";

  private static int [] zzUnpackAction() {
    int [] result = new int[7];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\7\0\7\0\16\0\25\0\7\0\34";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[7];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\2\1\3\1\4\1\5\1\6\1\7\11\0\1\3"+
    "\4\0\1\5\3\0\3\5\5\0\2\7";

  private static int [] zzUnpacktrans() {
    int [] result = new int[35];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\2\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[7];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */


    // Código Java de apoyo




  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AnalizadorLexico(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Yytoken yylex() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.println("Inicio de linea");
            }
          // fall through
          case 5: break;
          case 2:
            { System.out.println("Terminacion de linea");
            }
          // fall through
          case 6: break;
          case 3:
            { System.out.println("Token Identificador <" + yytext() + ">");
            }
          // fall through
          case 7: break;
          case 4:
            { System.out.println("Token Numero <" + yytext() + ">");
            }
          // fall through
          case 8: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
